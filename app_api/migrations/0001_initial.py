# Generated by Django 3.1.2 on 2020-12-04 10:58

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tyadmin_api_cli.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('name', models.CharField(max_length=255, verbose_name='用户名')),
                ('phone', models.CharField(max_length=255, verbose_name='手机号')),
                ('area', models.CharField(max_length=255, verbose_name='地区')),
                ('address', models.CharField(max_length=255, verbose_name='地址')),
                ('postcode', models.CharField(max_length=255, verbose_name='邮编')),
                ('isDefault', models.BooleanField(default=False, verbose_name='是否默认')),
            ],
            options={
                'verbose_name': '地址信息',
                'verbose_name_plural': '地址信息',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=255, verbose_name='用户名')),
                ('content', models.CharField(default='', max_length=1000, verbose_name='回答内容')),
            ],
            options={
                'verbose_name': '回答',
                'verbose_name_plural': '回答',
            },
        ),
        migrations.CreateModel(
            name='ArticleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='文章类型')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='文章code')),
            ],
            options={
                'verbose_name': '文章类型',
                'verbose_name_plural': '文章类型',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('lessonid', models.CharField(max_length=255, verbose_name='课程id')),
                ('img', tyadmin_api_cli.fields.SImageField(default='', max_length=255, upload_to='', verbose_name='封面图')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('price', models.IntegerField(default=0, verbose_name='价格')),
                ('isDiscount', models.BooleanField(verbose_name='是否优惠')),
                ('discountPrice', models.IntegerField(default=0, verbose_name='折后价格')),
            ],
            options={
                'verbose_name': '购物车',
                'verbose_name_plural': '购物车',
            },
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lessonid', models.CharField(max_length=255, verbose_name='课程id')),
                ('introduction', models.CharField(default='', max_length=255, verbose_name='课程介绍')),
                ('isComplete', models.BooleanField(verbose_name='是否完结')),
            ],
            options={
                'verbose_name': '课程目录信息',
                'verbose_name_plural': '课程目录信息',
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='章节标题')),
                ('introduce', models.CharField(default='', max_length=800, verbose_name='章节介绍')),
            ],
            options={
                'verbose_name': '章节',
                'verbose_name_plural': '章节',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lessonid', models.CharField(max_length=255, verbose_name='课程id')),
                ('name', models.CharField(default='', max_length=255, verbose_name='评论者')),
                ('avatar', tyadmin_api_cli.fields.SImageField(default='', max_length=255, upload_to='Comment_avatar', verbose_name='评论头像')),
                ('content_score', models.FloatField(default=0, verbose_name='内容分数')),
                ('easy_score', models.FloatField(default=0, verbose_name='简单分数')),
                ('logic_score', models.FloatField(default=0, verbose_name='逻辑分数')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='评论时间')),
                ('comment', models.CharField(default='', max_length=1000, verbose_name='评论内容')),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
            },
        ),
        migrations.CreateModel(
            name='CommonPathConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='名称')),
                ('path', models.CharField(max_length=255, verbose_name='访问路径')),
                ('icon', models.CharField(max_length=500, verbose_name='访问路径')),
                ('type', models.CharField(max_length=500, verbose_name='类型')),
            ],
            options={
                'verbose_name': '公共头部脚部配置',
                'verbose_name_plural': '公共头部脚部配置',
            },
        ),
        migrations.CreateModel(
            name='Consult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(blank=True, default='1', max_length=255, null=True, verbose_name='用户id')),
                ('like', models.BooleanField(default=False, verbose_name='是否点赞')),
                ('number', models.IntegerField(default=0, verbose_name='点赞数')),
                ('title', models.CharField(max_length=255, verbose_name='咨询标题')),
                ('answer', models.CharField(max_length=1000, verbose_name='咨询回答')),
                ('time', models.DateTimeField(max_length=255, verbose_name='咨询回答')),
                ('course_name', models.CharField(max_length=255, verbose_name='课程名字')),
            ],
            options={
                'verbose_name': '用户咨询',
                'verbose_name_plural': '用户咨询',
            },
        ),
        migrations.CreateModel(
            name='CouponRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='优惠券使用范围')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='优惠券使用范围code')),
            ],
            options={
                'verbose_name': '充值方式',
                'verbose_name_plural': '充值方式',
            },
        ),
        migrations.CreateModel(
            name='CouponStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='优惠券状态')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='优惠券状态code')),
            ],
            options={
                'verbose_name': '充值方式',
                'verbose_name_plural': '充值方式',
            },
        ),
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='验证码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('send_type', models.CharField(choices=[('register', '注册'), ('forget', '找回密码'), ('update_email', '修改邮箱'), ('login_auth', '登录授权')], max_length=20, verbose_name='验证码类型')),
                ('send_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='发送时间')),
            ],
            options={
                'verbose_name': '邮箱验证码',
                'verbose_name_plural': '邮箱验证码',
            },
        ),
        migrations.CreateModel(
            name='Footer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('url', models.CharField(max_length=255, verbose_name='url')),
                ('sort', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': '底部配置',
                'verbose_name_plural': '底部配置',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='历史记录值')),
                ('time', models.DateTimeField(auto_now=True, max_length=255, verbose_name='记录时间')),
            ],
            options={
                'verbose_name': '搜索历史',
                'verbose_name_plural': '搜索历史',
            },
        ),
        migrations.CreateModel(
            name='Hot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='热搜词')),
                ('time', models.DateTimeField(default=datetime.datetime.now, verbose_name='热搜时间')),
            ],
            options={
                'verbose_name': '热搜',
                'verbose_name_plural': '热搜',
            },
        ),
        migrations.CreateModel(
            name='IntegralType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='0', max_length=255, verbose_name='积分商品类别')),
                ('text', models.CharField(max_length=255, verbose_name='积分商品类别code')),
            ],
            options={
                'verbose_name': '积分商品类别',
                'verbose_name_plural': '积分商品类别',
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('sort', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': 'Label小项',
                'verbose_name_plural': 'Label小项',
            },
        ),
        migrations.CreateModel(
            name='LabelType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='名称')),
                ('code', models.IntegerField(default=0, verbose_name='code')),
                ('sort', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': 'Label类型',
                'verbose_name_plural': 'Label类型',
            },
        ),
        migrations.CreateModel(
            name='LessonHardType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255, unique=True, verbose_name='课程难度code')),
                ('text', models.CharField(max_length=255, verbose_name='课程难度')),
            ],
            options={
                'verbose_name': '课程难度类型',
                'verbose_name_plural': '课程难度类型',
            },
        ),
        migrations.CreateModel(
            name='LessonScript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='课程角标文本')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='课程角标code')),
            ],
            options={
                'verbose_name': '课程角标类型',
                'verbose_name_plural': '课程角标类型',
            },
        ),
        migrations.CreateModel(
            name='LessonType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255, unique=True, verbose_name='课程类型')),
                ('text', models.CharField(max_length=255, verbose_name='课程类型code')),
            ],
            options={
                'verbose_name': '课程类型',
                'verbose_name_plural': '课程类型',
            },
        ),
        migrations.CreateModel(
            name='LogType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='登录类型')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='登录类型code')),
            ],
            options={
                'verbose_name': '登录类型',
                'verbose_name_plural': '登录类型',
            },
        ),
        migrations.CreateModel(
            name='Nav',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='名称')),
                ('path', models.CharField(default='/', max_length=255, verbose_name='访问路径')),
                ('icon', models.ImageField(max_length=255, upload_to='', verbose_name='图标')),
            ],
            options={
                'verbose_name': '首页左侧菜单',
                'verbose_name_plural': '首页左侧菜单',
            },
        ),
        migrations.CreateModel(
            name='Navigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('code', models.CharField(max_length=255, verbose_name='code')),
                ('sort', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': '首页左侧菜单',
                'verbose_name_plural': '首页左侧菜单',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(default=0, verbose_name='通知code')),
                ('time', models.DateTimeField(max_length=255, verbose_name='通知时间')),
                ('title', models.CharField(max_length=255, verbose_name='通知标题')),
            ],
            options={
                'verbose_name': '通知',
                'verbose_name_plural': '通知',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('code', models.CharField(max_length=255, verbose_name='订单号')),
                ('time', models.DateTimeField(auto_now=True, max_length=255, verbose_name='订单生成时间')),
                ('expired', models.IntegerField(default=1800000, verbose_name='过期时间')),
                ('coupon', models.IntegerField(default=0, verbose_name='优惠卷')),
            ],
            options={
                'verbose_name': '订单',
                'verbose_name_plural': '订单',
            },
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='订单状态')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='订单状态code')),
            ],
            options={
                'verbose_name': '订单状态',
                'verbose_name_plural': '订单状态',
            },
        ),
        migrations.CreateModel(
            name='QaType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='问题类型')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='问题类型code')),
            ],
            options={
                'verbose_name': '文章类型',
                'verbose_name_plural': '文章类型',
            },
        ),
        migrations.CreateModel(
            name='Read',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, verbose_name='类型')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='标题')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Read_img', verbose_name='图片')),
                ('detailImg', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Read_detail', verbose_name='细节图片')),
                ('desc', models.CharField(max_length=255, verbose_name='描述')),
                ('price', models.IntegerField(default=0, verbose_name='价格')),
                ('persons', models.IntegerField(default=0, verbose_name='人数')),
                ('term', models.IntegerField(default=0, verbose_name='章节数')),
                ('isRecommend', models.BooleanField(default=False, verbose_name='是否推荐')),
            ],
            options={
                'verbose_name': '专栏',
                'verbose_name_plural': '专栏',
            },
        ),
        migrations.CreateModel(
            name='ReadChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='章节标题')),
                ('read', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='chapter', to='app_api.read', verbose_name='所属专栏')),
            ],
            options={
                'verbose_name': '专栏章节',
                'verbose_name_plural': '专栏章节',
            },
        ),
        migrations.CreateModel(
            name='ReadType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='类型值')),
                ('sort', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': '专栏分类',
                'verbose_name_plural': '专栏分类',
            },
        ),
        migrations.CreateModel(
            name='RechargeAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='充值类型')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='充值类型code')),
            ],
            options={
                'verbose_name': '充值类型',
                'verbose_name_plural': '充值类型',
            },
        ),
        migrations.CreateModel(
            name='RechargePay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='充值方式')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='充值方式code')),
            ],
            options={
                'verbose_name': '充值方式',
                'verbose_name_plural': '充值方式',
            },
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Slider_img', verbose_name='图片地址')),
                ('path', models.CharField(default='', max_length=255, verbose_name='跳转地址')),
                ('sort', models.IntegerField(default=0, verbose_name='排序')),
            ],
            options={
                'verbose_name': '首页Banner',
                'verbose_name_plural': '首页Banner',
            },
        ),
        migrations.CreateModel(
            name='StudentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='学生类型')),
                ('code', models.IntegerField(default=0, unique=True, verbose_name='学生code')),
            ],
            options={
                'verbose_name': '学生类型',
                'verbose_name_plural': '学生类型',
            },
        ),
        migrations.CreateModel(
            name='SysLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='动作时间')),
                ('ip_addr', models.CharField(blank=True, max_length=39, null=True, verbose_name='操作ip')),
                ('action_flag', models.CharField(blank=True, max_length=32, null=True, verbose_name='操作flag')),
                ('message', models.TextField(verbose_name='日志记录')),
                ('log_type', models.CharField(default='', max_length=200, verbose_name='日志类型')),
                ('user_name', models.CharField(default='1', max_length=200, verbose_name='用户')),
            ],
            options={
                'verbose_name': '系统日志',
                'verbose_name_plural': '系统日志',
                'ordering': ('-action_time',),
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='讲师姓名')),
                ('avatar', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Teacher_avatar', verbose_name='讲师头像')),
                ('job', models.CharField(max_length=255, verbose_name='讲师职业')),
                ('introduction', models.CharField(max_length=255, verbose_name='个人介绍')),
            ],
            options={
                'verbose_name': '讲师',
                'verbose_name_plural': '讲师',
            },
        ),
        migrations.CreateModel(
            name='UserNotice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='通知用户id')),
                ('isRead', models.BooleanField(verbose_name='通知已读')),
                ('isDelete', models.BooleanField(verbose_name='通知已删除')),
                ('messageid', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='notice', to='app_api.notice', verbose_name='通知id')),
            ],
            options={
                'verbose_name': '用户通知',
                'verbose_name_plural': '用户通知',
            },
        ),
        migrations.CreateModel(
            name='UserLesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('lessonid', models.CharField(max_length=255, verbose_name='课程id')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='UserLesson_img', verbose_name='图片')),
                ('percent', models.IntegerField(default=0, verbose_name='百分比')),
                ('isFollow', models.BooleanField(verbose_name='是否follow')),
                ('exp', models.IntegerField(default=0, verbose_name='经验')),
                ('hours', models.IntegerField(default=0, verbose_name='小时')),
                ('notes', models.IntegerField(default=0, verbose_name='笔记数量')),
                ('codes', models.IntegerField(default=0, verbose_name='代码片段数量')),
                ('questions', models.IntegerField(default=0, verbose_name='问题数量')),
                ('lastChapter', models.CharField(default='', max_length=255, verbose_name='最后一章节')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.lessontype', verbose_name='课程类型')),
            ],
            options={
                'verbose_name': '用户学习的课程',
                'verbose_name_plural': '用户学习的课程',
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seconds', models.IntegerField(verbose_name='时长')),
                ('title', models.CharField(default='', max_length=255, verbose_name='小节标题')),
                ('path', models.CharField(max_length=255, verbose_name='访问链接')),
                ('chapter', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='term', to='app_api.chapter', verbose_name='所属章节')),
            ],
            options={
                'verbose_name': '小节',
                'verbose_name_plural': '小节',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='pic', verbose_name='头像')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('number', models.IntegerField(default=0, verbose_name='积分数')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.studenttype', verbose_name='学生类型')),
            ],
            options={
                'verbose_name': '学生',
                'verbose_name_plural': '学生',
            },
        ),
        migrations.CreateModel(
            name='Recharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('time', models.DateTimeField(auto_now=True, max_length=255, verbose_name='充值时间')),
                ('money', models.IntegerField(default=0, verbose_name='充值金额(分)')),
                ('remark', models.CharField(default='', max_length=255, verbose_name='备注')),
                ('action', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.rechargeaction', verbose_name='RechargeAction')),
                ('way', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.rechargepay', verbose_name='RechargePay')),
            ],
            options={
                'verbose_name': '充值记录',
                'verbose_name_plural': '充值记录',
            },
        ),
        migrations.CreateModel(
            name='ReadChapterItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=255, verbose_name='小章节标题')),
                ('isTry', models.BooleanField(verbose_name='是否试看')),
                ('time', models.DateTimeField(verbose_name='发布时间')),
                ('read_chapter', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='chapter_item', to='app_api.readchapter', verbose_name='所属章节')),
            ],
            options={
                'verbose_name': '专栏章节小节',
                'verbose_name_plural': '专栏章节小节',
            },
        ),
        migrations.AddField(
            model_name='read',
            name='author',
            field=models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.teacher', verbose_name='作者'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='问题标题')),
                ('answers', models.IntegerField(default=0, verbose_name='问题回答')),
                ('views', models.IntegerField(default=0, verbose_name='问题点击量')),
                ('icon', tyadmin_api_cli.fields.SImageField(default='', max_length=255, upload_to='', verbose_name='问题图标')),
                ('isResolve', models.BooleanField(verbose_name='问题是否解决')),
                ('tags', models.ManyToManyField(blank=True, db_constraint=False, default=None, to='app_api.Label', verbose_name='问题拥有的label')),
            ],
            options={
                'verbose_name': '问题',
                'verbose_name_plural': '问题',
            },
        ),
        migrations.CreateModel(
            name='Qa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lessonid', models.CharField(max_length=255, verbose_name='课程id')),
                ('title', models.CharField(default='', max_length=255, verbose_name='问题名称')),
                ('avatar', tyadmin_api_cli.fields.SImageField(default='', max_length=255, upload_to='Qa_avatar', verbose_name='提问者头像')),
                ('answers', models.IntegerField(default=0, verbose_name='回答数')),
                ('views', models.IntegerField(default=0, verbose_name='查看数')),
                ('chapter', models.CharField(default='', max_length=255, verbose_name='章节名字')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='评论时间')),
                ('comment', models.CharField(default='', max_length=1000, verbose_name='评论内容')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.qatype', verbose_name='问题类型')),
            ],
            options={
                'verbose_name': 'Qa',
                'verbose_name_plural': 'Qa',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lessonid', models.CharField(max_length=255, verbose_name='课程id')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='', verbose_name='封面图')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('price', models.IntegerField(default=0, verbose_name='价格')),
                ('isDiscount', models.BooleanField(verbose_name='是否优惠')),
                ('discountPrice', models.IntegerField(default=0, verbose_name='折后价格')),
                ('order', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='list', to='app_api.order', verbose_name='所属订单')),
            ],
            options={
                'verbose_name': '订单小项',
                'verbose_name_plural': '订单小项',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='status',
            field=models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='list', to='app_api.orderstatus', verbose_name='订单状态'),
        ),
        migrations.AddField(
            model_name='order',
            name='way',
            field=models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='list', to='app_api.rechargepay', verbose_name='支付方式'),
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('time', models.CharField(max_length=255, verbose_name='时间')),
                ('ip', models.CharField(max_length=255, verbose_name='ip地址')),
                ('device', models.CharField(max_length=255, verbose_name='设备')),
                ('city', models.CharField(max_length=255, verbose_name='城市')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.logtype', verbose_name='日志类型')),
            ],
            options={
                'verbose_name': '访问日志',
                'verbose_name_plural': '访问日志',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='课程标题')),
                ('introduction', models.CharField(default='', max_length=255, verbose_name='课程介绍')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Lesson_img', verbose_name='课程图片')),
                ('banner', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Lesson_banner', verbose_name='课程Banner')),
                ('price', models.IntegerField(default=0, verbose_name='课程价格')),
                ('isDiscount', models.BooleanField(verbose_name='是否打折')),
                ('discountPrice', models.IntegerField(default=0, verbose_name='打折后价格')),
                ('time', models.DateTimeField(auto_now=True, max_length=255, verbose_name='课程添加时间')),
                ('persons', models.IntegerField(default=0, verbose_name='学习人数')),
                ('comments', models.IntegerField(default=0, verbose_name='评论数')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.labeltype', verbose_name='课程分类')),
                ('hard', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.lessonhardtype', verbose_name='课程难度类型')),
                ('labels', models.ManyToManyField(blank=True, db_constraint=False, default=None, to='app_api.Label', verbose_name='课程拥有的label')),
                ('script', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.lessonscript', verbose_name='课程角标')),
                ('teacher', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.teacher', verbose_name='课程讲师')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.lessontype', verbose_name='课程类型')),
            ],
            options={
                'verbose_name': '课程',
                'verbose_name_plural': '课程',
            },
        ),
        migrations.CreateModel(
            name='LabelFollow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.IntegerField(verbose_name='用户id')),
                ('labelid', models.IntegerField(default=0, verbose_name='Label的id')),
                ('title', models.CharField(max_length=255, verbose_name='Label的title')),
            ],
            options={
                'verbose_name': '关注Label',
                'verbose_name_plural': '关注Label',
                'unique_together': {('userid', 'labelid')},
            },
        ),
        migrations.AddField(
            model_name='label',
            name='type',
            field=models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.labeltype', verbose_name='Label类型'),
        ),
        migrations.CreateModel(
            name='Integral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Integral_img', verbose_name='图片')),
                ('title', models.CharField(max_length=255, verbose_name='标题')),
                ('integral', models.IntegerField(default=0, verbose_name='积分数')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.integraltype', verbose_name='积分商品类型')),
            ],
            options={
                'verbose_name': '积分商品',
                'verbose_name_plural': '积分商品',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('orderid', models.CharField(default='', max_length=255, verbose_name='订单id')),
                ('number', models.IntegerField(default=0, verbose_name='金额')),
                ('limit', models.IntegerField(default=0, verbose_name='限制类型')),
                ('starttime', models.DateTimeField(max_length=255, verbose_name='开始时间')),
                ('endtime', models.DateTimeField(max_length=255, verbose_name='结束时间')),
                ('usetime', models.CharField(default='', max_length=255, verbose_name='使用时间')),
                ('range', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.couponrange', verbose_name='优惠券使用范围')),
                ('status', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.couponstatus', verbose_name='优惠券使用状态')),
            ],
            options={
                'verbose_name': '优惠券',
                'verbose_name_plural': '优惠券',
            },
        ),
        migrations.AddField(
            model_name='chapter',
            name='lesson',
            field=models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.lesson', verbose_name='所属Lesson'),
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userid', models.CharField(max_length=255, verbose_name='用户id')),
                ('orderno', models.CharField(max_length=255, verbose_name='订单号')),
                ('name', models.CharField(max_length=255, verbose_name='课程名字')),
                ('time', models.CharField(max_length=255, verbose_name='时间')),
                ('cost', models.IntegerField(default=0, verbose_name='消费金额')),
                ('way', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.rechargepay', verbose_name='账单支方式')),
            ],
            options={
                'verbose_name': 'Bill',
                'verbose_name_plural': 'Bill',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='文章名')),
                ('img', tyadmin_api_cli.fields.SImageField(max_length=255, upload_to='Article_img', verbose_name='图片')),
                ('views', models.IntegerField(default=0, verbose_name='查看量')),
                ('author', models.CharField(max_length=255, verbose_name='作者')),
                ('tag', models.CharField(max_length=255, verbose_name='标签')),
                ('time', models.CharField(max_length=255, verbose_name='时间')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='', on_delete=django.db.models.deletion.DO_NOTHING, to='app_api.articletype', verbose_name='文章类型')),
            ],
            options={
                'verbose_name': '文章',
                'verbose_name_plural': '文章',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=255, verbose_name='昵称')),
                ('avatar', tyadmin_api_cli.fields.SImageField(default='https://static.mukewang.com/static/img/avatar_default.png', max_length=255, upload_to='User_avatar', verbose_name='头像')),
                ('sex', models.CharField(default='male', max_length=255, verbose_name='性别')),
                ('job', models.CharField(default='', max_length=255, verbose_name='工作')),
                ('city', models.CharField(default='', max_length=255, verbose_name='城市')),
                ('signature', models.CharField(default='', max_length=255, verbose_name='个性签名')),
                ('hour', models.IntegerField(default=0, verbose_name='学习时长')),
                ('exp', models.IntegerField(default=0, verbose_name='学习经验数')),
                ('integral', models.IntegerField(default=0, verbose_name='积分数')),
                ('follow', models.IntegerField(default=0, verbose_name='follow数')),
                ('fans', models.IntegerField(default=0, verbose_name='粉丝数')),
                ('email', models.CharField(default='', max_length=255, verbose_name='邮箱')),
                ('qq', models.CharField(default='', max_length=255, verbose_name='qq')),
                ('phone', models.CharField(default='', max_length=255, verbose_name='手机号')),
                ('wechat', models.CharField(default='', max_length=255, verbose_name='微信')),
                ('weibo', models.CharField(default='', max_length=255, verbose_name='微博')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='注册时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
